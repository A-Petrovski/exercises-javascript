---

name: Передача одного аргумента
theory: |

  Мы могли бы использовать подобную функцию на сайте или в какой-нибудь программе чтобы выводить текущую дату на экран. Но в текущем виде функция не справится с задачей, ведь она всегда выводит "Today is: December 5".

  Давайте улучшим функцию так, чтобы она принимала дату в качестве аргумента и выводила её на экран.

  Определим и вызовем нашу обновленную функцию:

  ```php
  const showCurrentDay = (text) => {
    console.log(`Today is: ${text}`);
  };

  showCurrentDay('January 29');
  ```

  <pre class='hexlet-basics-output'>Today is: January 29</pre>

  Теперь понятно, зачем нужны были круглые скобки после имени функции: в них *можно* указать аргументы (или, что тоже самое, параметры).

  Заметьте: мы не определяем переменную `text`, но используем её в теле функции. JavaScript работает так: переменная сама создаётся при вызове и указанное значение (в нашем примере — `'January 29'`) записывается в эту переменную.

  Аргументы можно называть как угодно, их имена имеют смысл исключительно в теле функции. Например, если изменить имя аргумента так:

  ```php
  const showCurrentDate = (lala) => {
    console.log(`Today is: ${lala}`);
  };

  const date = 'January 29';
  showCurrentDate(date);
  ```

  то поведение функции не изменится. Причем это касается как имен внутри функции (`lala`), так и снаружи (`date`).

  Новички иногда пытаются сделать примерно такое определение функции:

  ```php
  const showCurrentDate = ('Today is: December 5') => {
      // какой-нибудь код
  };
  ```

  Запустить код не получится — он содержит синтаксическую ошибку. Вместо переменной в аргументе написана строка, то есть значение.

  *Аргумент должен быть переменной*, иначе он не сможет быть аргументом, то есть чем-то, что *принимает значение при вызове*.

  Если же вам нужна какая-то информация в функции, и вы заранее знаете какая именно, то аргумент для этого не нужен, ведь мы уже умеем сохранять значения для последующего использования —  достаточно создать переменную в самом теле:

  ```php
  const showCurrentDate = () => {
      $text = 'Today is: December 5';
      // какой-нибудь код
  };
  ```

instructions: |

  Сэм составляет множество карт, и ему часто нужно выводить на экран повторяющиеся символы для визуализации маршрутов. Например, так Сэм иллюстрирует узкие дороги между городами:

  ```
  Meereen =-=-=-=- Myr
  ```

  А так иллюстрирует широкие трассы:

  ```
  Vaes Dothrak ======== Vahar
  ```

  В [документации PHP](http://php.net/manual/ru/function.str-repeat.php) он нашёл функцию `str_repeat`. Она принимает два аргумента: строку и число, и возвращает повторяющуюся строку. Вот как он использует её:

  ```php
  <?php

  print_r(str_repeat("=-", 4));
  ```

  <pre class='hexlet-basics-output'>=-=-=-=-</pre>

  Сэм не очень доволен. Ему нужно нарисовать сотни маршрутов разной длины с разными символами. Неудобно вызывать сотни раз `str_repeat` внутри вызова `print_r`.

  Напишите для Сэма функцию `printSeq`, которая сама выводит на экран получившиеся повторения. Она принимает два аргумента — строку и число, и выводит повторяющуюся строку на экран. Для генерации строки используйте `str_repeat`.

  Вот пример того, как Сэм будет использовать написанную вами `printSeq`:

  ```php
  <?php

  printSeq("=-", 4);
  ```

  <pre class='hexlet-basics-output'>=-=-=-=-</pre>

tips: []
